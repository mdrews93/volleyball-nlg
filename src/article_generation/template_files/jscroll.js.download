(function($) {	

    var pluginName = 'jscroll',
        defaults = {
            eventPassthrough: true,
            scrollX: true,
            scrollY: false,
            auto: false,
            autoDelay: 4000,
            circular: false,
            disableMouse: true
        };

    function Plugin( element, options ) {
        this.element = element;
        this.options = $.extend({}, defaults, options);
        this._defaults = defaults;
        this._name = pluginName;
        this.init();
    }

    Plugin.prototype.init = function () {
        var obj = this;
        var el = obj.element;
    	var scroller = new IScroll(el, obj.options);
    	obj.scroller = scroller;
    	var prev = $('<a href="#" class="prev">Prev</a>'), 
    	    next = $('<a href="#" class="next">Next</a>');
    	
    	var setupAuto = function() {
            if (scroller.pages) {
                var currentPage = scroller.hasHorizontalScroll ? scroller.currentPage.pageX : scroller.currentPage.pageY;
                nextPage = currentPage + 1;
                if (obj.options.circular && nextPage >= scroller.pages.length) {
                    nextPage = 0;
                }
                obj.autoTimer = setTimeout(function() {
                    var x = scroller.hasHorizontalScroll ? nextPage : 0;
                    var y = scroller.hasVerticalScroll ? nextPage : 0;
                    scroller.goToPage(x, y);
                }, obj.options.autoDelay);
            }  
    	};
    	
    	var updateButtonsState = function() {
            if (scroller.pages) {
                var currentPage = scroller.hasHorizontalScroll ? scroller.currentPage.pageX : scroller.currentPage.pageY;
                if (currentPage == (scroller.pages.length - 1)) {
                    next.addClass('disabled');
                } else {
                    next.removeClass('disabled');
                }
                
                if (currentPage == 0) {
                    prev.addClass('disabled');
                } else {
                    prev.removeClass('disabled');
                }
            }
        };
    	
    	scroller.on('scrollEnd', function() {
    	    updateButtonsState();
    	    if (obj.options.auto) {
    	        setupAuto();
    	    }
    	});
    	
    	$(window).on("refresh", function() {
    		scroller.refresh();
    	});
    	
    	if (obj.options.snap && obj.options.showPrevNext) {
    	    prev.insertAfter(el);
    	    next.insertAfter(el),
    	        
        	next.add(prev).on('click', function() {
        	    if ($(this).is('.next')) {
                    scroller.next();   
        	    } else {
                    scroller.prev();
        	    }
                return false;
        	});
        	
            $(window).on('dom_updated', updateButtonsState);
            updateButtonsState();
    	}
    	
    	if (obj.options.auto) {
    	    setupAuto();
    	}
    };
    
    Plugin.prototype.scrollToElement = function(el) {
    	this.scroller.scrollToElement(el, 600, true, true);
    };

    $.fn[pluginName] = function (options) {
        return this.each(function () {
            if (!$.data(this, 'plugin_' + pluginName)) {
                $.data(this, 'plugin_' + pluginName, new Plugin(this, options));
            }
        });
    };
})(jQuery);